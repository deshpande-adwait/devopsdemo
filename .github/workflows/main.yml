name: Sync Production to DevOpsDemo Production

on:
  push:
    branches: 
      - production

jobs:
  merge:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source repository
        id: checkout
        uses: actions/checkout@v3
        with:
          repository: deshpande-adwait/devopsdemo
          ref: production
          fetch-depth: 0
          token: ${{ secrets.PAT_DEPLOY_KEY }}
        continue-on-error: true

      - name: Check checkout status
        if: steps.checkout.outcome != 'success'
        run: |
          echo "::error::Failed to checkout repository"
          exit 1

      - name: Configure Git
        id: git_config
        run: |
          git config user.name "deshpande-adwait"
          git config user.email "actions@github.com"
          git config merge.ours.driver true
          echo "Git configuration completed successfully"
        continue-on-error: true

      - name: Add target remote repository
        id: add_remote
        run: |
          if ! git remote add target https://${GITHUB_ACTOR}:${PAT_DEPLOY_KEY}@github.com/deshpande-adwait/devopsdemo_production.git; then
            echo "::error::Failed to add remote repository"
            exit 1
          fi
          
          if ! git fetch target; then
            echo "::error::Failed to fetch from remote repository"
            exit 1
          fi
          echo "Remote repository added and fetched successfully"
        env:
          PAT_DEPLOY_KEY: ${{ secrets.PAT_DEPLOY_KEY }}

          - name: Merge changes and detect conflicts
          id: merge
          run: |
            # Create and checkout new branch
            if ! git checkout -b temp_merge_branch; then
              echo "::error::Failed to create temporary branch"
              exit 1
            fi
            
            # Try a test merge first to detect conflicts
            echo "Detecting potential conflicts..."
            CONFLICTS=$(git merge-tree $(git merge-base HEAD target/main) HEAD target/main | grep -A3 "changed in both" || true)
            
            if [ ! -z "$CONFLICTS" ]; then
              echo "Conflicts detected in the following files:"
              echo "$CONFLICTS" | tee conflict_report.txt
              echo "::warning::Merge conflicts detected - will be resolved using 'theirs' strategy"
              
              # Create issue with conflict details
              gh issue create \
                --title "Merge Conflicts Detected and Auto-resolved" \
                --body "The following conflicts were automatically resolved using 'theirs' strategy: $(cat conflict_report.txt)" \
                --label "auto-resolved-conflicts" \
                --repo deshpande-adwait/devopsdemo_production
            fi
            
            # Perform actual merge with theirs strategy and allow unrelated histories
            if ! git merge --allow-unrelated-histories -X theirs target/main; then
              echo "::error::Merge failed even with theirs strategy"
              exit 1
            fi
            
            # Push changes
            if ! git push target temp_merge_branch:main; then
              echo "::error::Failed to push changes to target repository"
              exit 1
            fi
            
            echo "Merge and push completed successfully"
          env:
            GH_TOKEN: ${{ secrets.PAT_DEPLOY_KEY }}
            PAT_DEPLOY_KEY: ${{ secrets.PAT_DEPLOY_KEY }}  

      - name: Save conflict report
        if: always()
        run: |
          if [ -f conflict_report.txt ]; then
            echo "::group::Conflict Report"
            cat conflict_report.txt
            echo "::endgroup::"
          fi

      - name: Cleanup
        if: always()
        id: cleanup
        run: |
          git checkout production || echo "::warning::Failed to checkout production branch"
          git branch -D temp_merge_branch || echo "::warning::Failed to delete temporary branch"

      - name: Notify status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "::notice::Workflow completed successfully - Changes merged from devopsdemo/production to devopsdemo_production/main"
          else
            echo "::error::Workflow failed - Check previous steps for detailed error messages"
            
            # Create issue for failed workflow
            gh issue create \
              --title "Merge Workflow Failed: Production to DevOpsDemo Production" \
              --body "The merge workflow failed. Please check the workflow logs for details." \
              --label "workflow-failure" \
              --repo deshpande-adwait/devopsdemo_production
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_DEPLOY_KEY }}
