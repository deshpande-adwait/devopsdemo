name: Sync Production to DevOpsDemo Production

on:
  workflow_dispatch:  # Allows manual triggering
  push:
    branches:
      - production  # Will trigger on pushes to production branch
      
  pull_request:
    branches:
      - production  # Will trigger on PRs targeting production branch

jobs:
  merge:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source repository
        id: checkout
        uses: actions/checkout@v3
        with:
          repository: deshpande-adwait/devopsdemo
          ref: production
          fetch-depth: 0  # Fetch all history
          token: ${{ secrets.PAT_DEPLOY_KEY }}

      - name: Check checkout status
        if: always()
        run: |
          if [ "${{ steps.checkout.outcome }}" == "success" ]; then
            echo "::notice::Repository checkout completed successfully"
          else
            echo "::error::Failed to checkout repository"
            exit 1
          fi

      - name: Fetch complete history
        run: |
          git fetch origin --prune --unshallow --tags --force
          git fetch origin 'refs/heads/*:refs/heads/*'
          git fetch origin 'refs/tags/*:refs/tags/*'
          echo "::notice::Fetched complete history of source repository"

      - name: Configure Git
        id: git_config
        run: |
          if git config user.name "deshpande-adwait" && \
             git config user.email "actions@github.com" && \
             git config merge.ours.driver true; then
            echo "::notice::Git configuration completed successfully"
          else
            echo "::error::Git configuration failed"
            exit 1
          fi

      - name: Add target remote repository
        id: add_remote
        run: |
          if git remote add target https://${GITHUB_ACTOR}:${PAT_DEPLOY_KEY}@github.com/deshpande-adwait/devopsdemo_production.git; then
            echo "::notice::Remote repository added successfully"
          else
            echo "::error::Failed to add remote repository"
            exit 1
          fi
          
          # Fetch everything from target
          git fetch target --prune --tags
          git fetch target 'refs/heads/*:refs/remotes/target/*'
          echo "::notice::Remote repository fetched successfully with complete history"
        env:
          PAT_DEPLOY_KEY: ${{ secrets.PAT_DEPLOY_KEY }}

      - name: Verify commits to be merged
        id: verify_commits
        run: |
          echo "::group::Current branches status"
          echo "Source branch (HEAD) full history:"
          git log --oneline production
          echo "-----------------------------------------"
          echo "Target branch (target/main) full history:"
          git log --oneline target/main
          echo "::endgroup::"

          echo "::group::Branch comparison"
          echo "Commits in source but not in target:"
          git log --oneline target/main..HEAD || true
          echo "-----------------------------------------"
          echo "Commits in target but not in source:"
          git log --oneline HEAD..target/main || true
          echo "::endgroup::"
          
          echo "::group::File comparison"
          echo "Comparing specific files between branches:"
          for file in $(git ls-tree -r --name-only HEAD); do
            echo "Checking $file:"
            if [ -f "$file" ]; then
              echo "Source version:"
              git show HEAD:"$file" | md5sum
              echo "Target version (if exists):"
              git show target/main:"$file" 2>/dev/null | md5sum || echo "File not in target"
              echo "-----------------------------------------"
            fi
          done
          echo "::endgroup::"
          
          echo "::group::Full diff between branches"
          git diff target/main..HEAD --name-status || true
          echo "::endgroup::"
          
          # Store all differences in a file
          git diff target/main..HEAD > full_diff.txt
          
          echo "Checking for any missing commits..."
          MISSING_COMMITS=$(git rev-list --count target/main..HEAD)
          if [ "$MISSING_COMMITS" -eq "0" ]; then
            echo "::warning::No new commits to merge!"
            echo "missing_commits=false" >> $GITHUB_OUTPUT
          else
            echo "::notice::Found $MISSING_COMMITS commits to merge"
            echo "missing_commits=true" >> $GITHUB_OUTPUT
          fi

          # Show current git status
          echo "::group::Git Status"
          git status
          echo "::endgroup::"

          # Additional debug information
          echo "::group::Git Remote Information"
          git remote -v
          git branch -a
          echo "::endgroup::"

      - name: Merge changes and detect conflicts
        if: steps.verify_commits.outputs.missing_commits == 'true'
        id: merge
        run: |
          # Create and checkout new branch from latest source
          git checkout -b temp_merge_branch production
          
          # Ensure we have latest from target
          git fetch target --prune --tags
          
          # Create a backup of current state
          git branch backup_branch
          
          # Force reset target to match source exactly
          echo "Syncing target to match source exactly..."
          git push target production:main --force
          
          echo "::notice::Force synced source to target"
          
          # Verify the sync
          echo "::group::Verification after sync"
          echo "Source HEAD:"
          git log -1 --oneline production
          echo "Target HEAD:"
          git ls-remote target main
          echo "::endgroup::"
        env:
          GH_TOKEN: ${{ secrets.PAT_DEPLOY_KEY }}
          PAT_DEPLOY_KEY: ${{ secrets.PAT_DEPLOY_KEY }}

      - name: Save diff report
        if: always()
        run: |
          if [ -f full_diff.txt ]; then
            echo "::group::Full Diff Report"
            cat full_diff.txt
            echo "::endgroup::"
            echo "::notice::Diff report saved successfully"
          else
            echo "::notice::No diff report to save"
          fi

      - name: Cleanup
        if: always()
        id: cleanup
        run: |
          if git checkout production; then
            echo "::notice::Switched back to production branch successfully"
          else
            echo "::warning::Failed to checkout production branch"
          fi
          
          if git branch -D temp_merge_branch; then
            echo "::notice::Temporary branch deleted successfully"
          else
            echo "::warning::Failed to delete temporary branch"
          fi
          
          if git branch -D backup_branch; then
            echo "::notice::Backup branch deleted successfully"
          else
            echo "::warning::Failed to delete backup branch"
          fi

      - name: Notify status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            if [ "${{ steps.verify_commits.outputs.missing_commits }}" == "true" ]; then
              echo "::notice::Workflow completed successfully - Changes merged from devopsdemo/production to devopsdemo_production/main"
            else
              echo "::notice::Workflow completed - No new commits to merge"
            fi
          else
            echo "::error::Workflow failed - Check previous steps for detailed error messages"
            
            # Create issue for failed workflow
            if gh issue create \
              --title "Merge Workflow Failed: Production to DevOpsDemo Production" \
              --body "The merge workflow failed. Please check the workflow logs for details." \
              --label "workflow-failure" \
              --repo deshpande-adwait/devopsdemo_production; then
              echo "::notice::Created failure notification issue successfully"
            else
              echo "::error::Failed to create failure notification issue"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_DEPLOY_KEY }}
